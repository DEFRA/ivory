'use strict'

const config = require('../utils/config')
const NodeClam = require('clamscan')
const options = {
  removeInfected: false, // If true, removes infected files
  quarantineInfected: false, // False: Don't quarantine, Path: Moves files to this place.
  scanLog: null, // Path to a writeable log file to write scan results into
  debugMode: true, // Whether or not to log info/debug/error msgs to the console
  fileList: null, // path to file containing list of files to scan (for scanFiles method)
  scanRecursively: true, // If true, deep scan folders recursively
  clamscan: {
    path: `${config.clamscanBinaries}clamscan`, // Path to clamscan binary on your server
    db: null, // Path to a custom virus definition database
    scanArchives: true, // If true, scan archives (ex. zip, rar, tar, dmg, iso, etc...)
    active: true // If true, this module will consider using the clamscan binary
  },
  clamdscan: {
    socket: false, // Socket file for connecting via TCP
    host: false, // IP of host to connect to TCP interface
    port: false, // Port of host to use when connecting via TCP interface
    timeout: 60000, // Timeout for scanning files
    localFallback: false, // Do no fail over to binary-method of scanning
    path: `${config.clamscanBinaries}clamdscan`, // Path to the clamdscan binary on your server
    configFile: null, // Specify config file if it's in an unusual place
    multiscan: true, // Scan using all available cores! Yay!
    reloadDb: false, // If true, will re-load the DB on every call (slow)
    active: true, // If true, this module will consider using the clamdscan binary
    bypassTest: false // Check to see if socket is available when applicable
  },
  preference: 'clamdscan' // If clamdscan is found and active, it will be used by default
}

module.exports = class AntimalwareService {
  static async version () {
    try {
      const clamscan = await new NodeClam().init(JSON.parse(JSON.stringify(options))) // "options" wrapped like this to fix issue with it not being read properly after first use
      return clamscan.getVersion()
    } catch (err) {
      return err
    }
  }

  static async scan (fileToScan) {
    try {
      const clamscan = await new NodeClam().init(JSON.parse(JSON.stringify(options)))
      const { isInfected, file, viruses } = await clamscan.isInfected(fileToScan)
      if (isInfected) {
        return `${file} is infected with ${viruses}!`
      }
      return false
    } catch (err) {
      console.error(err)
      return false
    }
  }
}
