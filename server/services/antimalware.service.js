'use strict'

const config = require('../utils/config')
const NodeClam = require('clamscan')

module.exports = class AntimalwareService {
  static async version () {
    try {
      const options = {
        removeInfected: false, // If true, removes infected files
        quarantineInfected: false, // False: Don't quarantine, Path: Moves files to this place.
        scanLog: null, // Path to a writeable log file to write scan results into
        debugMode: false, // Whether or not to log info/debug/error msgs to the console
        fileList: null, // path to file containing list of files to scan (for scanFiles method)
        scanRecursively: true, // If true, deep scan folders recursively
        clamscan: {
          path: config.clamscanBinary, // Path to clamscan binary on your server
          db: null, // Path to a custom virus definition database
          scanArchives: true, // If true, scan archives (ex. zip, rar, tar, dmg, iso, etc...)
          active: true // If true, this module will consider using the clamscan binary
        },
        clamdscan: {
          active: false // you don't want to use this at all because it's evil
        }
      }
      const clamscan = await new NodeClam().init(options)
      return await clamscan.getVersion()
    } catch (err) {
      return err
    }
  }

  static async scan (fileToScan) {
    try {
      const options = {
        removeInfected: false, // If true, removes infected files
        quarantineInfected: false, // False: Don't quarantine, Path: Moves files to this place.
        scanLog: null, // Path to a writeable log file to write scan results into
        debugMode: true, // Whether or not to log info/debug/error msgs to the console
        fileList: null, // path to file containing list of files to scan (for scanFiles method)
        scanRecursively: true, // If true, deep scan folders recursively
        clamscan: {
          path: config.clamscanBinary, // Path to clamscan binary on your server
          db: null, // Path to a custom virus definition database
          scanArchives: true, // If true, scan archives (ex. zip, rar, tar, dmg, iso, etc...)
          active: true // If true, this module will consider using the clamscan binary
        },
        clamdscan: {
          active: false // you don't want to use this at all because it's evil
        }
      }
      const clamscan = await new NodeClam().init(options)
      const { isInfected, file, viruses } = await clamscan.isInfected(fileToScan)
      if (isInfected) return `${file} is infected with ${viruses}!`
      return false
    } catch (err) {
      console.error(err)
      return false
    }
  }
}
